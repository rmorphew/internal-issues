name: Test Project Access (read-only)

on:
  workflow_dispatch: {}
  issues:
    types: [opened, edited]

permissions:
  contents: read
  issues: read
  # repository-projects is harmless here but not strictly required for read-only GraphQL
  repository-projects: read

env:
  PROJECT_OWNER: rmorphew          # your GitHub username
  PROJECT_TITLE: Issue Tracker     # exact title of your Project v2

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Show event basics
        run: |
          echo "Actor:              ${{ github.actor }}"
          echo "Repo:               ${{ github.repository }}"
          echo "Event:              ${{ github.event_name }}"
          echo "Issue number:       ${{ github.event.issue.number }}"
          echo "Issue node_id:      ${{ github.event.issue.node_id }}"
          echo "Issue created_at:   ${{ github.event.issue.created_at }}"

      - name: Resolve project id (user project)
        id: project
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}   # Classic PAT with repo, project, workflow
        run: |
          q='query($login:String!){
            user(login:$login){ projectsV2(first:100){ nodes{ id title } } }
          }'
          data=$(jq -n --arg q "$q" --arg login "$PROJECT_OWNER" '{query:$q,variables:{login:$login}}')
          resp=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -d "$data" https://api.github.com/graphql)
          echo "GraphQL user projects response:"
          echo "$resp" | jq -C .

          pid=$(echo "$resp" | jq -r --arg t "$PROJECT_TITLE" '.data.user.projectsV2.nodes[]? | select(.title==$t) | .id')
          if [ -z "$pid" ] || [ "$pid" = "null" ]; then
            echo "::error::Project \"$PROJECT_TITLE\" not found under user \"$PROJECT_OWNER\""
            exit 0
          fi
          echo "project_id=$pid" >> "$GITHUB_OUTPUT"
          echo "Resolved Project ID: $pid"

      - name: List project fields (name / type / id)
        env:
          GH_TOKEN:   ${{ secrets.PROJECTS_PAT }}
          PROJECT_ID: ${{ steps.project.outputs.project_id }}
        run: |
          q='query($id:ID!){
            node(id:$id){
              ... on ProjectV2{
                fields(first:100){
                  nodes{
                    __typename
                    ... on ProjectV2FieldCommon { id name dataType }
                    ... on ProjectV2SingleSelectField { options { id name } }
                  }
                }
              }
            }
          }'
          data=$(jq -n --arg q "$q" --arg id "$PROJECT_ID" '{query:$q,variables:{id:$id}}')
          resp=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -d "$data" https://api.github.com/graphql)
          echo "Fields on project:"
          echo "$resp" | jq -C '.data.node.fields.nodes[] | {name, dataType, id}'

      - name: Check if THIS issue is already in the project
        env:
          GH_TOKEN:   ${{ secrets.PROJECTS_PAT }}
          PROJECT_ID: ${{ steps.project.outputs.project_id }}
          ISSUE_NODE: ${{ github.event.issue.node_id }}
        run: |
          q='query($pid:ID!){
            node(id:$pid){
              ... on ProjectV2{
                items(first:200){
                  nodes{
                    id
                    content { __typename ... on Issue { id number title } }
                  }
                }
              }
            }
          }'
          data=$(jq -n --arg q "$q" --arg pid "$PROJECT_ID" '{query:$q,variables:{pid:$pid}}')
          resp=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -d "$data" https://api.github.com/graphql)

          echo "First 200 items:"
          echo "$resp" | jq -C '.data.node.items.nodes[] | {itemId:.id, type:.content.__typename, issueId:.content.id, number:.content.number, title:.content.title}'

          item_id=$(echo "$resp" | jq -r --arg iid "$ISSUE_NODE" '.data.node.items.nodes[] | select(.content.__typename=="Issue" and .content.id==$iid) | .id')
          if [ -n "$item_id" ]; then
            echo "✔ This issue is already on the project. item_id=$item_id"
          else
            echo "✖ This issue has NOT appeared on the project yet (race is normal)."
          fi
