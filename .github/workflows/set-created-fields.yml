name: Set Project "Created By / Created At"

on:
  issues:
    types: [opened, edited]

permissions:
  contents: read
  issues: write
  repository-projects: write

env:
  PROJECT_OWNER: rmorphew          # your GitHub username
  PROJECT_TITLE: Issue Tracker     # exact title of your Project v2
  FIELD_CREATED_BY: Created By     # TEXT field
  FIELD_CREATED_AT: Created At     # DATE field

jobs:
  set-fields:
    runs-on: ubuntu-latest
    steps:
      - name: Prep values
        id: vals
        run: |
          echo "issue_node_id=${{ github.event.issue.node_id }}" >> "$GITHUB_OUTPUT"
          echo "issue_api_url=${{ github.event.issue.url }}"    >> "$GITHUB_OUTPUT"
          echo "creator=${{ github.event.issue.user.login }}"   >> "$GITHUB_OUTPUT"
          echo "created_date=$(echo '${{ github.event.issue.created_at }}' | cut -c1-10)" >> "$GITHUB_OUTPUT"

      - name: Resolve project id + field ids (user)
        id: meta
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}   # use your Classic PAT here
        run: |
          qUser='query($login:String!){
            user(login:$login){ projectsV2(first:100){ nodes{ id title } } }
          }'
          body=$(jq -n --arg q "$qUser" --arg login "$PROJECT_OWNER" '{query:$q,variables:{login:$login}}')
          resp=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql)
          pid=$(echo "$resp" | jq -r --arg t "$PROJECT_TITLE" '.data.user.projectsV2.nodes[]? | select(.title==$t) | .id')
          [ -n "$pid" ] || { echo "Project not found; exiting."; exit 0; }

          qFields='query($id:ID!){
            node(id:$id){
              ... on ProjectV2{
                fields(first:100){ nodes{ id name dataType } }
              }
            }
          }'
          body=$(jq -n --arg q "$qFields" --arg id "$pid" '{query:$q,variables:{id:$id}}')
          resp=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql)
          by=$(echo "$resp" | jq -r --arg n "$FIELD_CREATED_BY" '.data.node.fields.nodes[] | select(.name==$n) | .id')
          byT=$(echo "$resp" | jq -r --arg n "$FIELD_CREATED_BY" '.data.node.fields.nodes[] | select(.name==$n) | .dataType')
          at=$(echo "$resp" | jq -r --arg n "$FIELD_CREATED_AT" '.data.node.fields.nodes[] | select(.name==$n) | .id')
          atT=$(echo "$resp" | jq -r --arg n "$FIELD_CREATED_AT" '.data.node.fields.nodes[] | select(.name==$n) | .dataType')

          echo "project_id=$pid" >> "$GITHUB_OUTPUT"
          echo "by_field_id=$by"  >> "$GITHUB_OUTPUT"
          echo "by_type=$byT"     >> "$GITHUB_OUTPUT"
          echo "at_field_id=$at"  >> "$GITHUB_OUTPUT"
          echo "at_type=$atT"     >> "$GITHUB_OUTPUT"

      - name: Wait for issue to appear in the project (poll up to ~30s)
        id: item
        env:
          GH_TOKEN:   ${{ secrets.PROJECTS_PAT }}
          PROJECT_ID: ${{ steps.meta.outputs.project_id }}
          ISSUE_NODE: ${{ steps.vals.outputs.issue_node_id }}
        run: |
          get_item() {
            q='query($pid:ID!){
              node(id:$pid){
                ... on ProjectV2{
                  items(first:200){
                    nodes{ id content{ __typename ... on Issue { id } } }
                  }
                }
              }
            }'
            data=$(jq -n --arg q "$q" --arg pid "$PROJECT_ID" '{query:$q,variables:{pid:$pid}}')
            curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$data" https://api.github.com/graphql |
              jq -r --arg iid "$ISSUE_NODE" '.data.node.items.nodes[] | select(.content.__typename=="Issue" and .content.id==$iid) | .id'
          }
          for i in $(seq 1 15); do
            item_id=$(get_item)
            if [ -n "$item_id" ]; then
              echo "item_id=$item_id" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            sleep 2
          done
          echo "No project item found yet; exiting."
          exit 0

      - name: Guard: fields must exist and types match
        if: "${{ steps.item.outputs.item_id == '' || steps.meta.outputs.by_field_id == '' || steps.meta.outputs.at_field_id == '' || steps.meta.outputs.by_type != 'TEXT' || steps.meta.outputs.at_type != 'DATE' }}"
        run: echo "Skip: missing project item or fields."

      - name: Update Created By / Created At
        if: "${{ steps.item.outputs.item_id != '' && steps.meta.outputs.by_type == 'TEXT' && steps.meta.outputs.at_type == 'DATE' }}"
        env:
          GH_TOKEN:   ${{ secrets.PROJECTS_PAT }}
          PROJECT_ID: ${{ steps.meta.outputs.project_id }}
          ITEM_ID:    ${{ steps.item.outputs.item_id }}
          BY_FIELD:   ${{ steps.meta.outputs.by_field_id }}
          AT_FIELD:   ${{ steps.meta.outputs.at_field_id }}
          CREATOR:    ${{ steps.vals.outputs.creator }}
          CREATED:    ${{ steps.vals.outputs.created_date }}
        run: |
          m='mutation($input:UpdateProjectV2ItemFieldValueInput!){
               updateProjectV2ItemFieldValue(input:$input){ projectV2Item { id } }
             }'
          body=$(jq -n --arg m "$m" --arg pid "$PROJECT_ID" --arg iid "$ITEM_ID" --arg fid "$BY_FIELD" --arg v "$CREATOR" \
                 '{query:$m,variables:{input:{projectId:$pid,itemId:$iid,fieldId:$fid,value:{text:$v}}}}')
          curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql > /dev/null
          body=$(jq -n --arg m "$m" --arg pid "$PROJECT_ID" --arg iid "$ITEM_ID" --arg fid "$AT_FIELD" --arg v "$CREATED" \
                 '{query:$m,variables:{input:{projectId:$pid,itemId:$iid,fieldId:$fid,value:{date:$v}}}}')
          curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql > /dev/null
