name: Set "Created By / Created At" on Project

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: read

env:
  PROJECT_OWNER: rmorphew
  PROJECT_TITLE: Issue Tracker
  FIELD_CREATED_BY: Created By
  FIELD_CREATED_AT: Created At

jobs:
  update-fields:
    runs-on: ubuntu-latest
    steps:
      - name: Collect event data
        id: vals
        run: |
          echo "creator=${{ github.event.issue.user.login }}" >> "$GITHUB_OUTPUT"
          echo "created_date=$(echo '${{ github.event.issue.created_at }}' | cut -c1-10)" >> "$GITHUB_OUTPUT"
          echo "issue_node=${{ github.event.issue.node_id }}" >> "$GITHUB_OUTPUT"
          echo "issue_num=${{ github.event.issue.number }}"   >> "$GITHUB_OUTPUT"

      - name: Get project id and field ids (robust)
        id: meta
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}  # classic PAT: repo + workflow + project
        run: |
          set -e
          echo "Looking up user=${PROJECT_OWNER} project='${PROJECT_TITLE}'"
          q1='query($login:String!){
            user(login:$login){ projectsV2(first:100){ nodes{ id title } } }
          }'
          data1=$(jq -n --arg q "$q1" --arg login "$PROJECT_OWNER" '{query:$q,variables:{login:$login}}')
          resp1=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -d "$data1" https://api.github.com/graphql)
          echo "Projects response:"; echo "$resp1" | jq -C .

          pid=$(echo "$resp1" | jq -r --arg t "$PROJECT_TITLE" '.data.user.projectsV2.nodes[]? | select(.title==$t) | .id')
          if [ -z "$pid" ] || [ "$pid" = "null" ]; then
            echo "::warning::Project not found. Title must match exactly."
            exit 0
          fi
          echo "project_id=$pid" >> "$GITHUB_OUTPUT"
          echo "Project ID: $pid"

          q2='query($id:ID!){
            node(id:$id){
              ... on ProjectV2{
                fields(first:100){
                  nodes{
                    __typename
                    ... on ProjectV2FieldCommon { id name dataType }
                    ... on ProjectV2SingleSelectField { options { id name } }
                  }
                }
              }
            }
          }'
          data2=$(jq -n --arg q "$q2" --arg id "$pid" '{query:$q,variables:{id:$id}}')
          resp2=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -d "$data2" https://api.github.com/graphql)
          echo "Fields response:"; echo "$resp2" | jq -C '.data.node.fields.nodes[]? | {name, dataType, id}'

          by=$(echo "$resp2" | jq -r --arg n "$FIELD_CREATED_BY" '.data.node.fields.nodes[]? | select(.name==$n) | .id // empty')
          at=$(echo "$resp2" | jq -r --arg n "$FIELD_CREATED_AT" '.data.node.fields.nodes[]? | select(.name==$n) | .id // empty')

          if [ -n "$by" ]; then echo "by_field=$by" >> "$GITHUB_OUTPUT"; echo "Created By field id: $by"; else echo "::warning::Field '$FIELD_CREATED_BY' not found (must be TEXT)."; fi
          if [ -n "$at" ]; then echo "at_field=$at" >> "$GITHUB_OUTPUT"; echo "Created At field id: $at"; else echo "::warning::Field '$FIELD_CREATED_AT' not found (must be DATE)."; fi

      - name: Ensure item is in project (wait/add)
        id: item
        if: ${{ steps.meta.outputs.project_id != '' }}
        env:
          GH_TOKEN:   ${{ secrets.PROJECTS_PAT }}
          PROJECT_ID: ${{ steps.meta.outputs.project_id }}
          ISSUE_NODE: ${{ steps.vals.outputs.issue_node }}
          ISSUE_NUM:  ${{ steps.vals.outputs.issue_num }}
        run: |
          q='query($pid:ID!){
            node(id:$pid){
              ... on ProjectV2{
                items(first:200){
                  nodes{
                    id
                    content{
                      __typename
                      ... on Issue { id number title }
                    }
                  }
                }
              }
            }
          }'

          add_mut='mutation($pid:ID!,$cid:ID!){
            addProjectV2ItemById(input:{projectId:$pid, contentId:$cid}){ item { id } }
          }'

          data_q()  { jq -n --arg q "$q" --arg pid "$PROJECT_ID" '{query:$q,variables:{pid:$pid}}'; }
          data_add(){ jq -n --arg m "$add_mut" --arg pid "$PROJECT_ID" --arg cid "$ISSUE_NODE" '{query:$m,variables:{pid:$pid,cid:$cid}}'; }

          for i in $(seq 1 60); do
            resp=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -d "$(data_q)" https://api.github.com/graphql)
            item_id=$(echo "$resp" | jq -r --arg iid "$ISSUE_NODE" --argjson num "$ISSUE_NUM" '
              .data.node.items.nodes[]? |
              select(.content.__typename=="Issue" and (.content.id==$iid or (.content.number?==$num))) |
              .id // empty')

            if [ -n "$item_id" ]; then
              echo "item_id=$item_id" >> "$GITHUB_OUTPUT"
              echo "Found project item: $item_id"
              exit 0
            fi

            # Try to add it (harmless if it's already there)
            curl -sS -H "Authorization: Bearer $GH_TOKEN" -d "$(data_add)" https://api.github.com/graphql > /dev/null
            sleep 5
          done

          echo "::warning::Issue not found/added to project after 5 minutes."
          echo "item_id=" >> "$GITHUB_OUTPUT"

      - name: Update Created By / Created At
        if: ${{ steps.item.outputs.item_id != '' && steps.meta.outputs.by_field != '' && steps.meta.outputs.at_field != '' }}
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}
          PROJECT_ID: ${{ steps.meta.outputs.project_id }}
          ITEM_ID: ${{ steps.item.outputs.item_id }}
          BY_FIELD: ${{ steps.meta.outputs.by_field }}
          AT_FIELD: ${{ steps.meta.outputs.at_field }}
          CREATOR: ${{ steps.vals.outputs.creator }}
          CREATED: ${{ steps.vals.outputs.created_date }}
        run: |
          mutation='mutation($input:UpdateProjectV2ItemFieldValueInput!){
            updateProjectV2ItemFieldValue(input:$input){ projectV2Item { id } }
          }'

          echo "Setting Created By='$CREATOR' and Created At='$CREATED'"

          body=$(jq -n --arg q "$mutation" \
                  --arg pid "$PROJECT_ID" --arg iid "$ITEM_ID" --arg fid "$BY_FIELD" --arg v "$CREATOR" \
                  '{query:$q,variables:{input:{projectId:$pid,itemId:$iid,fieldId:$fid,value:{text:$v}}}}')
          curl -sS -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql | jq -C .

          body=$(jq -n --arg q "$mutation" \
                  --arg pid "$PROJECT_ID" --arg iid "$ITEM_ID" --arg fid "$AT_FIELD" --arg v "$CREATED" \
                  '{query:$q,variables:{input:{projectId:$pid,itemId:$iid,fieldId:$fid,value:{date:$v}}}}')
          curl -sS -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql | jq -C .
