name: Backfill Project Created By/At

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/5 * * * *"  # every 5 minutes (max allowed)

permissions:
  contents: read
  issues: read

env:
  PROJECT_OWNER: rmorphew
  PROJECT_TITLE: Issue Tracker
  FIELD_CREATED_BY: Created By
  FIELD_CREATED_AT: Created At

jobs:
  backfill:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve Project and Field IDs
        id: meta
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}
        run: |
          set -e
          echo "Looking up project '${PROJECT_TITLE}' for user '${PROJECT_OWNER}'"

          # Get project ID
          q1='query($login:String!){
            user(login:$login){ projectsV2(first:100){ nodes{ id title } } }
          }'
          body=$(jq -n --arg q "$q1" --arg login "$PROJECT_OWNER" '{query:$q,variables:{login:$login}}')
          resp=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql)
          echo "$resp" | jq -C .
          pid=$(echo "$resp" | jq -r --arg t "$PROJECT_TITLE" '.data.user.projectsV2.nodes[]? | select(.title==$t) | .id')
          [ -n "$pid" ] || { echo "::error::Project not found."; exit 1; }
          echo "project_id=$pid" >> "$GITHUB_OUTPUT"
          echo "Resolved project id: $pid"

          # Verify fields exist
          q2='query($id:ID!){
            node(id:$id){ ... on ProjectV2{ fields(first:100){ nodes{ id name dataType } } } }
          }'
          body=$(jq -n --arg q "$q2" --arg id "$pid" '{query:$q,variables:{id:$id}}')
          resp=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql)
          echo "Fields:"; echo "$resp" | jq -C '.data.node.fields.nodes[]? | {name,dataType,id}'

      - name: Backfill missing values
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}
          PROJECT_ID: ${{ steps.meta.outputs.project_id }}
          FIELD_CREATED_BY: ${{ env.FIELD_CREATED_BY }}
          FIELD_CREATED_AT: ${{ env.FIELD_CREATED_AT }}
        run: |
          set -e
          echo "Starting backfill for project $PROJECT_ID"

          query_items=$(cat <<'EOF'
          query($pid:ID!, $after:String){
            node(id:$pid){
              ... on ProjectV2{
                items(first:50, after:$after){
                  nodes{
                    id
                    content{
                      __typename
                      ... on Issue { id number createdAt author { login } }
                    }
                    createdByVal: fieldValueByName(name: "Created By"){ ... on ProjectV2ItemFieldTextValue { text } }
                    createdAtVal: fieldValueByName(name: "Created At"){ ... on ProjectV2ItemFieldDateValue { date } }
                  }
                  pageInfo{ hasNextPage endCursor }
                }
              }
            }
          }
          EOF
          )

          update_mut='mutation($input:UpdateProjectV2ItemFieldValueInput!){
            updateProjectV2ItemFieldValue(input:$input){ projectV2Item { id } }
          }'

          after=""
          scanned=0
          updated=0

          while true; do
            body=$(jq -n --arg q "$query_items" --arg pid "$PROJECT_ID" --arg after "$after" \
              '{query:$q,variables:{pid:$pid,after:($after|length>0? $after : null)}}')

            resp=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql)

            hasNext=$(echo "$resp" | jq -r '.data.node.items.pageInfo.hasNextPage')
            after=$(echo "$resp" | jq -r '.data.node.items.pageInfo.endCursor // ""')

            echo "$resp" | jq -c '.data.node.items.nodes[]' | while read -r node; do
              scanned=$((scanned+1))
              type=$(echo "$node" | jq -r '.content.__typename')
              [ "$type" = "Issue" ] || continue
              itemId=$(echo "$node" | jq -r '.id')
              issueAuthor=$(echo "$node" | jq -r '.content.author.login // empty')
              issueDate=$(echo "$node" | jq -r '.content.createdAt[0:10]')
              hasBy=$(echo "$node" | jq -r '.createdByVal.text // empty')
              hasAt=$(echo "$node" | jq -r '.createdAtVal.date // empty')

              if [ -z "$hasBy" ] && [ -n "$issueAuthor" ]; then
                body=$(jq -n --arg q "$update_mut" \
                           --arg pid "$PROJECT_ID" --arg iid "$itemId" --arg v "$issueAuthor" \
                           '{query:$q,variables:{input:{projectId:$pid,itemId:$iid,value:{text:$v}}}}')
                curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql > /dev/null
                updated=$((updated+1))
                echo "Set Created By → $issueAuthor"
              fi

              if [ -z "$hasAt" ] && [ -n "$issueDate" ]; then
                body=$(jq -n --arg q "$update_mut" \
                           --arg pid "$PROJECT_ID" --arg iid "$itemId" --arg v "$issueDate" \
                           '{query:$q,variables:{input:{projectId:$pid,itemId:$iid,value:{date:$v}}}}')
                curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql > /dev/null
                updated=$((updated+1))
                echo "Set Created At → $issueDate"
              fi
            done

            [ "$hasNext" = "true" ] || break
          done

          echo "Scanned $scanned items, updated $updated"
