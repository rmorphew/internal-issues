name: Backfill Project Created By/At

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/5 * * * *"  # every 5 minutes (max allowed)

permissions:
  contents: read
  issues: read

env:
  PROJECT_OWNER: rmorphew
  PROJECT_TITLE: Issue Tracker
  FIELD_CREATED_BY: Created By
  FIELD_CREATED_AT: Created At

jobs:
  backfill:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve Project and Field IDs
        id: meta
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}
        run: |
          set -e
          echo "Looking up project '${PROJECT_TITLE}' for user '${PROJECT_OWNER}'"

          # Directly set your project ID (avoids visibility issues)
          pid="PVT_kwHOAgVoGc4BC4my"
          echo "project_id=$pid" >> "$GITHUB_OUTPUT"
          echo "Using fixed project id: $pid"


          # Verify fields exist and capture their IDs
          q2='query($id:ID!){
            node(id:$id){ ... on ProjectV2{ fields(first:100){ nodes{ id name dataType } } } }
          }'
          body=$(jq -n --arg q "$q2" --arg id "$pid" '{query:$q,variables:{id:$id}}')
          resp=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql)
          echo "Fields:"; echo "$resp" | jq -C '.data.node.fields.nodes[]? | {name,dataType,id}'

          by=$(echo "$resp" | jq -r --arg n "$FIELD_CREATED_BY" '.data.node.fields.nodes[]? | select(.name==$n) | .id // empty')
          at=$(echo "$resp" | jq -r --arg n "$FIELD_CREATED_AT" '.data.node.fields.nodes[]? | select(.name==$n) | .id // empty')
          [ -n "$by" ] || echo "::warning::Field '$FIELD_CREATED_BY' not found (should be TEXT)."
          [ -n "$at" ] || echo "::warning::Field '$FIELD_CREATED_AT' not found (should be DATE)."
          echo "by_field=$by" >> "$GITHUB_OUTPUT"
          echo "at_field=$at" >> "$GITHUB_OUTPUT"

      - name: Backfill missing values
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}
          PROJECT_ID: ${{ steps.meta.outputs.project_id }}
          BY_FIELD:   ${{ steps.meta.outputs.by_field }}
          AT_FIELD:   ${{ steps.meta.outputs.at_field }}
        run: |
          set -e
          echo "Starting backfill for project $PROJECT_ID"

          # GraphQL queries/mutation
          query_items=$(cat <<'EOF'
          query($pid:ID!, $after:String){
            node(id:$pid){
              ... on ProjectV2{
                items(first:50, after:$after){
                  nodes{
                    id
                    content{
                      __typename
                      ... on Issue { id number createdAt author { login } }
                    }
                    createdByVal: fieldValueByName(name: "Created By"){ ... on ProjectV2ItemFieldTextValue { text } }
                    createdAtVal: fieldValueByName(name: "Created At"){ ... on ProjectV2ItemFieldDateValue { date } }
                  }
                  pageInfo{ hasNextPage endCursor }
                }
              }
            }
          }
          EOF
          )

          update_mut='mutation($input:UpdateProjectV2ItemFieldValueInput!){
            updateProjectV2ItemFieldValue(input:$input){ projectV2Item { id } }
          }'

          after=""
          scanned=0
          updated=0

          while true; do
            # Build variables without tripping jq with ?: — only include "after" when non-empty
            if [ -n "$after" ]; then
              vars=$(jq -n --arg pid "$PROJECT_ID" --arg after "$after" '{pid:$pid, after:$after}')
            else
              vars=$(jq -n --arg pid "$PROJECT_ID" '{pid:$pid}')
            fi
            body=$(jq -n --arg q "$query_items" --argjson v "$vars" '{query:$q,variables:$v}')

            resp=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql)

            hasNext=$(echo "$resp" | jq -r '.data.node.items.pageInfo.hasNextPage')
            after=$(echo "$resp" | jq -r '.data.node.items.pageInfo.endCursor // ""')

            echo "$resp" | jq -c '.data.node.items.nodes[]' | while read -r node; do
              scanned=$((scanned+1))
              type=$(echo "$node" | jq -r '.content.__typename')
              [ "$type" = "Issue" ] || continue

              itemId=$(echo "$node" | jq -r '.id')
              issueAuthor=$(echo "$node" | jq -r '.content.author.login // empty')
              issueDate=$(echo "$node" | jq -r '.content.createdAt[0:10]')
              hasBy=$(echo "$node" | jq -r '.createdByVal.text // empty')
              hasAt=$(echo "$node" | jq -r '.createdAtVal.date // empty')

              # Created By
              if [ -z "$hasBy" ] && [ -n "$issueAuthor" ]; then
                body=$(jq -n --arg q "$update_mut" \
                           --arg pid "$PROJECT_ID" --arg iid "$itemId" --arg fid "$BY_FIELD" --arg v "$issueAuthor" \
                           '{query:$q,variables:{input:{projectId:$pid,itemId:$iid,fieldId:$fid,value:{text:$v}}}}')
                curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql > /dev/null
                updated=$((updated+1))
                echo "Set Created By → $issueAuthor"
              fi

              # Created At
              if [ -z "$hasAt" ] && [ -n "$issueDate" ]; then
                body=$(jq -n --arg q "$update_mut" \
                           --arg pid "$PROJECT_ID" --arg iid "$itemId" --arg fid "$AT_FIELD" --arg v "$issueDate" \
                           '{query:$q,variables:{input:{projectId:$pid,itemId:$iid,fieldId:$fid,value:{date:$v}}}}')
                curl -s -H "Authorization: Bearer $GH_TOKEN" -d "$body" https://api.github.com/graphql > /dev/null
                updated=$((updated+1))
                echo "Set Created At → $issueDate"
              fi
            done

            [ "$hasNext" = "true" ] || break
          done

          echo "Scanned $scanned items, updated $updated"
